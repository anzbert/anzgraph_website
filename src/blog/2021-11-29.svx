<script context="module" lang="ts">
  export const meta: postMeta = {
    title: "Hello World!",
    date: new Date("2021-11-29"),
    tags: ["#misc", "#coding"],
  };
</script>

This is my first blog entry of my new website. The site is still under development, but it has been an enjoyable journey to get it to its current state.

I started writing plain **C** in around 2018, just tinkering with Arduinos and LEDs. That was my _'gateway drug'_ into coding, because I was hooked. I started taking on bigger micro controller projects, such as the MIDI devices in the project section of this page.

My knowledge of software engineering was quite shallow at the time and low-level concepts seemed a bit scary and overwhelming. I never ventured beyond the cosy libraries-included Arduino ecosystem, whose loosely walled-garden kept me safe from the madness that is cmake and dependency management in C/C++.

## Taking it to the next level!

  <img class="gif" loading="lazy" src="img/gif/you-can-do-it-small.gif" alt="animation of girl saying 'you can do it!'">

In March 2021, I started taking coding and studying a lot more seriously. I wanted to understand how software works and build projects on different platforms. I wanted to understand what happened when I naively threw lines of code at the compiler. And I wanted to call my self a **Developer**!

I also love the idea of contributing to the open source community, which helped me **a lot** along the way! But first, I would need to get to a level, where I could actually be helpful to others.

### My next language: Javascript

So hard! There is a tonne of conflicting advice on the internet on what the most useful languages are, because there probably isn't _one_. In the end, I picked Javascript (and therefore HTML and CSS as a consequence).
Some of my reasons were:

- It has a massive user base, which for me translates to easy googling for help.
- It is versatile and can be used on many platforms, backend and frontend.
- It is not too hard to pick up, thanks to high-level abstractions and allows for different programming styles.
- And finally, it is written with familiar C syntax, which I found myself preferring a lot over Python's indented blocks. Love myself some curly brackets üòõ !

Most of my studying was done with a combination of text books, web search, Youtube and an online course I bought from Mosh Hamedani. Overall, I probably dedicated about 1-6 hours per (almost every) day to studying, with at least an hour of reading per day.

I also made sure to always find a small project to apply my newly learned skills to practically. Some examples: I made an XXO game with a simple AI, a Connect Four game, a simple first attempt at a website and some simple graphical simulations with bouncing balls and moving waves. I also made a nice-looking, but ultimately useless üòÖ markdown-based report generator with Electron, which was a great learning exercise for both back and frontend.

## Looking back

Looking back on the last 6 months, I am now comfortable with Javascript and I am getting there with CSS as well, as a side effect. I am confident that I can read code and work out its meaning, that I can read and understand the documentation and that I can google almost everything else üòÜ.

Maybe the biggest challenge throughout learning Javascript was that it is such a permissive multi-paradigm language. For me as a beginner, it would have sometimes been more helpful to have one clear best-practice solution to a problem. But hell no!! Javascript let's you do everything in 10 different ways. Functional, object-oriented, declarative, imperative, whatever... use prototypes, constructors, factories, classes or just functions and literal objects?! Anything goes! Googling for best practices will lead to controversial opinions about the language and its features, and which _'syntactic sugar'_ needs to be avoided at all cost.

For a beginner, it's not always an easy territory to traverse. I have found my way somewhere in the middle and I use different features in an experimental and playful way, and then refactor them away or leave them in later on. Whatever helps simplicity, modularity and readability.

At the end of the day, there is always more to learn and I am looking forward to it! I have since discovered Rust üòç and Typescript üòé, but that's a different story.

## Links

A non-exhaustive list of some of my most used learning materials and tools.

### Javascript resources which I found most helpful:

- [javascript.info](https://javascript.info), website and e-book by Ilya Kantor
- [Secrets of the Javascript Ninja, 2nd Edition](https://www.manning.com/books/secrets-of-the-javascript-ninja-second-edition), by John Resig, Bear Bibeault, and Josip Maras
- [MDN - Javascript docs](https://developer.mozilla.org/en-US/docs/Web/javascript), by Mozilla
- [Advent of Code](https://adventofcode.com/), challenging coding puzzles by Eric Wastl

### Tools I used a lot while learning:

- [Visual Studio Code](https://code.visualstudio.com/), by Microsoft and my favourite code editor
- [Node.js](https://nodejs.org/) and its package manager NPM
- [p5.js](https://p5js.org/), an amazingly simple graphical library based on canvas

### Content creators I enjoyed greatly as my teachers:

- [The Coding Train](https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw), by Daniel Shiffman
- [Code with Mosh](https://www.youtube.com/c/programmingwithmosh), by Mosh Hamedani
- [Web Dev Simplified](https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw) with Kyle
- [Fireship](https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA), by Jeff Delaney

<style>
.gif {
  width: 6rem;
  float:left;
  margin: 0.7rem 0.7rem 0 0;
}
</style>
